/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package yazlabproje;

import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;
import java.sql.*;
import java.util.ArrayList;
import java.util.Timer;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hp
 */
public class Dashboard1 extends javax.swing.JFrame {

    int kuryeKonumBastaSecildiMi = 0;
    Kargo kuryeeKonum = null;
    ArrayList<Integer> siraIndexleri = new ArrayList<Integer>();
    boolean kuryeKonumuBelirlendi = false;
    Timer timer = new Timer();
    ArrayList<Kargo> kargolar = new ArrayList<Kargo>();
    private Dashboard2 dash2;
    public GoogleMatrixRequest gmRequest = new GoogleMatrixRequest();
    Kargo kuryeeSonKonum = null;
    public int markerKey = 1;
    private GoogleMapsViewer gmv = new GoogleMapsViewer();

    public void setDash2(Dashboard2 dash2) {
        this.dash2 = dash2;
    }

    public void foo(double x, double y, String key, String label) {
        this.dash2.gmv.addMarker(WIDTH, WIDTH, key, null);
    }

    public void setjLabel1Text(String text) {
        this.jLabel1.setText(text);
    }

    public void setjLabel2Text(String text) {
        this.jLabel2.setText(text);
    }

    public ArrayList<Integer> getSiraIndexleri() {
        return siraIndexleri;
    }

    public void setSiraIndexleri(ArrayList<Integer> siraIndexleri) {
        this.siraIndexleri = siraIndexleri;
    }

    /**
     * Creates new form NewJFrame
     */
    public Dashboard1() throws ParserConfigurationException, SAXException, IOException {
        initComponents();
        gmv.setSize(mapsPanel.getSize());
        mapsPanel.add(gmv);
        gmv.loadMap("html/maps.html");
        gmv.addClickListener((latLng) -> {
            jLabel1.setText("" + latLng.lat);
            jLabel2.setText("" + latLng.lng);

        });
        teslimEdilmeyenlerGuncelle();
        teslimEdilenlerGuncelle();
        JOptionPane.showMessageDialog(null, "Başlamadan önce kuryenin konumunu belirlemeniz gerekmektedir.");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        kargoyuSil = new javax.swing.JMenuItem();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        teslimEdilmisKargoyuSil = new javax.swing.JMenuItem();
        mapsPanel = new javax.swing.JPanel();
        kargoEkleButon = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        manuelKargoEkle = new javax.swing.JButton();
        yolButon = new javax.swing.JButton();
        kuryeKonumButon = new javax.swing.JButton();
        tumKargoSilButon = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        teslimEdilenlerTablo = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        teslimEdilmeyenlerTablo = new javax.swing.JTable();
        teslimEdilen = new javax.swing.JLabel();
        dagitimCheckBox = new javax.swing.JCheckBox();
        latTextBox = new javax.swing.JTextField();
        lngTextBox = new javax.swing.JTextField();
        siradakiKargoButon = new javax.swing.JButton();
        manuelKuryeEkle = new javax.swing.JButton();

        kargoyuSil.setText("Kargoyu Sil");
        kargoyuSil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kargoyuSilActionPerformed(evt);
            }
        });
        jPopupMenu1.add(kargoyuSil);

        teslimEdilmisKargoyuSil.setText("Kargoyu Sil");
        teslimEdilmisKargoyuSil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teslimEdilmisKargoyuSilActionPerformed(evt);
            }
        });
        jPopupMenu2.add(teslimEdilmisKargoyuSil);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mapsPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mapsPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout mapsPanelLayout = new javax.swing.GroupLayout(mapsPanel);
        mapsPanel.setLayout(mapsPanelLayout);
        mapsPanelLayout.setHorizontalGroup(
            mapsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 507, Short.MAX_VALUE)
        );
        mapsPanelLayout.setVerticalGroup(
            mapsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 310, Short.MAX_VALUE)
        );

        kargoEkleButon.setText("Kargo Ekle");
        kargoEkleButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kargoEkleButonActionPerformed(evt);
            }
        });

        manuelKargoEkle.setText("Elle Kargo Ekle");
        manuelKargoEkle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manuelKargoEkleActionPerformed(evt);
            }
        });

        yolButon.setText("Yolu Hesapla ve Çiz");
        yolButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yolButonActionPerformed(evt);
            }
        });

        kuryeKonumButon.setText("Kurye Konumunu Belirle");
        kuryeKonumButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kuryeKonumButonActionPerformed(evt);
            }
        });

        tumKargoSilButon.setText("Tüm Kargoları Sil");
        tumKargoSilButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tumKargoSilButonActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("EKLENECEK OLAN KORDINATLAR");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Kargo teslim sırası burada görünecek");

        jTabbedPane2.setToolTipText("");
        jTabbedPane2.setName(""); // NOI18N

        teslimEdilenlerTablo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        teslimEdilenlerTablo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                teslimEdilenlerTabloMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(teslimEdilenlerTablo);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Teslim Edilenler", jPanel2);

        teslimEdilmeyenlerTablo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        teslimEdilmeyenlerTablo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                teslimEdilmeyenlerTabloMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(teslimEdilmeyenlerTablo);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Teslim Edilmeyenler", jPanel3);

        teslimEdilen.setText("Teslim Edildi: Kargo");

        dagitimCheckBox.setText("Dağıtıma başla");
        dagitimCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dagitimCheckBoxİtemStateChanged(evt);
            }
        });

        latTextBox.setText("Lateral(Enlem) değeri girin");

        lngTextBox.setText("Longitude(Boylam) değeri girin");

        siradakiKargoButon.setText("Sıradaki Kargoyu Teslim Et");
        siradakiKargoButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siradakiKargoButonActionPerformed(evt);
            }
        });

        manuelKuryeEkle.setText("Elle Kurye Konum Belirle");
        manuelKuryeEkle.setToolTipText("");
        manuelKuryeEkle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manuelKuryeEkleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(49, Short.MAX_VALUE)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 723, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(siradakiKargoButon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(manuelKargoEkle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(kargoEkleButon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(yolButon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(kuryeKonumButon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tumKargoSilButon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                    .addComponent(teslimEdilen)
                    .addComponent(dagitimCheckBox)
                    .addComponent(latTextBox)
                    .addComponent(lngTextBox)
                    .addComponent(manuelKuryeEkle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(mapsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mapsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(latTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lngTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                        .addComponent(manuelKuryeEkle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(manuelKargoEkle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(teslimEdilen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dagitimCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kargoEkleButon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addGap(37, 37, 37)
                        .addComponent(yolButon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kuryeKonumButon, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tumKargoSilButon)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(siradakiKargoButon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane2.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void kargoEkleme() {
        if (kuryeeKonum == null) {
            JOptionPane.showMessageDialog(null, "Önce kuryenin konumunu belirlemeniz gerekmektedir.");
        } else {
            Double x = Double.parseDouble(jLabel1.getText());
            Double y = Double.parseDouble(jLabel2.getText());
            String z = Integer.toString(markerKey);
            gmv.addMarker(x, y, z, null);
            this.dash2.gmv.addMarker(x, y, z, null);
            markerKey += 1;
            Kargo yeniKargo = new Kargo(x, y);
            kargolar.add(yeniKargo);
            veriTabaninaKargoEkle(yeniKargo.getKargoLat(), yeniKargo.getKargoLng());
            teslimEdilmeyenlerGuncelle();
            yolCizimVeHesaplama();
        }
    }

    private void kargoEkleButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kargoEkleButonActionPerformed
        kargoEkleme();
    }//GEN-LAST:event_kargoEkleButonActionPerformed

    private void mapsPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapsPanelMouseClicked

    }//GEN-LAST:event_mapsPanelMouseClicked

    private void manuelKargoEkleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manuelKargoEkleActionPerformed
        if (kuryeeKonum == null) {
            JOptionPane.showMessageDialog(null, "Önce kuryenin konumunu belirlemeniz gerekmektedir.");
        } else {
            Double x = Double.parseDouble(latTextBox.getText());
            Double y = Double.parseDouble(lngTextBox.getText());
            String z = Integer.toString(markerKey);
            gmv.addMarker(x, y, z, null);
            this.dash2.gmv.addMarker(x, y, z, null);
            markerKey += 1;
            Kargo yeniKargo = new Kargo(x, y);
            kargolar.add(yeniKargo);
            veriTabaninaKargoEkle(yeniKargo.getKargoLat(), yeniKargo.getKargoLng());
            teslimEdilmeyenlerGuncelle();
            yolCizimVeHesaplama();
        }
    }//GEN-LAST:event_manuelKargoEkleActionPerformed

    public void yolCizimVeHesaplama() {
        gmRequest = new GoogleMatrixRequest();
        if (kuryeKonumuBelirlendi) {
            try {
                gmRequest.setKuryeKonum(kuryeeKonum);
                gmRequest.hesapla();
                jLabel4.setText("Kargo Sırası(0 Numara Kuryedir)- " + gmRequest.optimizeRota);
                siraIndexleri = gmRequest.getPathIndexleri();
                dash2.gmv.initMap();
                gmv.setKuryeMarker(kuryeeKonum.kargoLat, kuryeeKonum.kargoLng, "0", null);
                for (int i = 0; i < siraIndexleri.size(); i++) {
                    int index = siraIndexleri.get(i);
                    if (index == 0) {
                        dash2.gmv.setKuryeMarker(kuryeeKonum.kargoLat, kuryeeKonum.kargoLng, "0", null);
                    } else {
                        dash2.gmv.addMarker(kargolar.get(index - 1).kargoLat, kargolar.get(index - 1).kargoLng, "X", null);
                    }
                }

                dash2.gmv.cizgiCizme();

            } catch (IOException | InterruptedException ex) {
                Logger.getLogger(Dashboard1.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Kuryenin konumunu belirlemeniz gerekmektedir.");
        }
    }

    private void yolButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yolButonActionPerformed
        yolCizimVeHesaplama();
    }//GEN-LAST:event_yolButonActionPerformed

    private void kuryeKonumButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kuryeKonumButonActionPerformed
        if (kuryeKonumBastaSecildiMi == 0) {
            kuryeKonumBastaSecildiMi = 1;
            kuryeKonumuBelirlendi = true;
            Double x = Double.parseDouble(jLabel1.getText());
            Double y = Double.parseDouble(jLabel2.getText());
            String z = Integer.toString(markerKey);
            gmv.setKuryeMarker(x, y, z, null);
            Kargo kurye = new Kargo(x, y);
            gmRequest.setKuryeKonum(kurye);
            kuryeeKonum = kurye;
            dash2.gmv.setKuryeMarker(x, y, z, null);
            kargolariYukle();
            yolCizimVeHesaplama();
        } else {
            markerKey = 0;
            Double x = Double.parseDouble(jLabel1.getText());
            Double y = Double.parseDouble(jLabel2.getText());
            gmv.initMap();
            dash2.gmv.initMap();
            gmv.setKuryeMarker(x, y, "0", null);
            Kargo kurye = new Kargo(x, y);
            gmRequest.setKuryeKonum(kurye);
            kuryeeKonum = kurye;
            dash2.gmv.setKuryeMarker(x, y, "0", null);
            kargolariYukle();
            yolCizimVeHesaplama();
        }
    }//GEN-LAST:event_kuryeKonumButonActionPerformed

    private void tumKargoSilButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tumKargoSilButonActionPerformed
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = String.format("jdbc:mysql://35.202.83.160:3306/proje");
            Connection conn = DriverManager.getConnection(url, "root", "emre1441.");
            System.out.println("Veritabanına Bağlandı.");
            String query = "DELETE FROM kargolar";

            Statement ifade = conn.createStatement();
            ifade.execute(query);
            conn.close();

        } catch (SQLException | ClassNotFoundException e) {
            System.out.println("Veritabanına Bağlanamadı." + e);

        }
    }//GEN-LAST:event_tumKargoSilButonActionPerformed

    private void dagitimCheckBoxİtemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dagitimCheckBoxİtemStateChanged

        if (dagitimCheckBox.isSelected()) {
            yolCizimVeHesaplama();
            Runnable kargoTeslimi = new Runnable() {
                public void run() {
                    if (dagitimCheckBox.isSelected()) {
                        try {
                            siraIndexleri = gmRequest.getPathIndexleri();
                            int siraIndexi = siraIndexleri.get(1);
                            if (siraIndexleri.size() == 2) {
                                dagitimCheckBox.setSelected(false);
                                String yazi = "Kargolar teslim edildi.";
                                JOptionPane.showMessageDialog(null, yazi);
                                markerKey = 1;
                                kargolariYukle();
                                yolCizimVeHesaplama();
                            } else {
                                Class.forName("com.mysql.cj.jdbc.Driver");
                                String url = String.format("jdbc:mysql://35.202.83.160:3306/proje");
                                Connection conn = DriverManager.getConnection(url, "root", "emre1441.");
                                System.out.println("Veritabanına bağlandı.");
                                String query = "UPDATE kargolar SET teslimEdildiMi='true' WHERE kargoLat=" + kargolar.get(siraIndexi - 1).kargoLat + " AND kargoLng=" + kargolar.get(siraIndexi - 1).kargoLng + "";
                                Statement ifade = conn.createStatement();
                                ifade.executeUpdate(query);
                                conn.close();
                                String yazi = siraIndexi + " Numaralı Kargo Teslim Edildi.";
                                JOptionPane.showMessageDialog(null, yazi);
                                teslimEdilen.setText("Teslim Edildi: Kargo " + siraIndexi);
                                siraIndexleri.remove(1);
                                kuryeeKonum = kargolar.get(siraIndexi - 1);

                                System.out.println("Teslim Edildi: Kargo  " + siraIndexi + " " + kargolar.get(siraIndexi - 1).kargoLat);
                            }

                        } catch (SQLException | ClassNotFoundException e) {
                            System.out.println("Veritabanına baglanamadı. " + e);
                        }
                    }
                }
            };
            ScheduledExecutorService zamanlayici1 = Executors.newScheduledThreadPool(1);
            zamanlayici1.scheduleAtFixedRate(kargoTeslimi, 0, 7, TimeUnit.SECONDS);
        } else {
            teslimEdilenlerGuncelle();
            teslimEdilmeyenlerGuncelle();
            kargolariYukle();
            yolCizimVeHesaplama();
        }
    }//GEN-LAST:event_dagitimCheckBoxİtemStateChanged

    private void teslimEdilmeyenlerTabloMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_teslimEdilmeyenlerTabloMouseReleased
        if (evt.getButton() == MouseEvent.BUTTON3) {
            if (evt.isPopupTrigger() && teslimEdilmeyenlerTablo.getSelectedRowCount() != 0) {
                jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
            }
        }
    }//GEN-LAST:event_teslimEdilmeyenlerTabloMouseReleased

    private void kargoyuSilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kargoyuSilActionPerformed
        int row = teslimEdilmeyenlerTablo.getSelectedRow();
        double kLat = Double.parseDouble(teslimEdilmeyenlerTablo.getModel().getValueAt(row, 0).toString());
        double kLng = Double.parseDouble(teslimEdilmeyenlerTablo.getModel().getValueAt(row, 1).toString());
        System.out.println("klat: " + kLat + " kLng: " + kLng);
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = String.format("jdbc:mysql://35.202.83.160:3306/proje");
            Connection conn = DriverManager.getConnection(url, "root", "emre1441.");
            System.out.println("Veritabanına Bağlandı.");
            String query = "DELETE FROM kargolar WHERE kargoLat=" + kLat + " and kargoLng=" + kLng;
            Statement ifade = conn.createStatement();
            ifade.execute(query);
            conn.close();
            teslimEdilmeyenlerGuncelle();
            kargolariYukle();
            yolCizimVeHesaplama();

        } catch (SQLException | ClassNotFoundException e) {
            System.out.println("Veritabanına Bağlanamadı." + e);

        }

    }//GEN-LAST:event_kargoyuSilActionPerformed

    private void teslimEdilenlerTabloMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_teslimEdilenlerTabloMouseReleased
        if (evt.getButton() == MouseEvent.BUTTON3) {
            if (evt.isPopupTrigger() && teslimEdilenlerTablo.getSelectedRowCount() != 0) {
                jPopupMenu2.show(evt.getComponent(), evt.getX(), evt.getY());
            }
        }
    }//GEN-LAST:event_teslimEdilenlerTabloMouseReleased

    private void teslimEdilmisKargoyuSilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teslimEdilmisKargoyuSilActionPerformed
        int row = teslimEdilenlerTablo.getSelectedRow();

        double kLat = Double.parseDouble(teslimEdilenlerTablo.getModel().getValueAt(row, 0).toString());
        double kLng = Double.parseDouble(teslimEdilenlerTablo.getModel().getValueAt(row, 1).toString());
        System.out.println("klat: " + kLat + " kLng: " + kLng);
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = String.format("jdbc:mysql://35.202.83.160:3306/proje");
            Connection conn = DriverManager.getConnection(url, "root", "emre1441.");
            System.out.println("Veritabanına Bağlandı.");
            String query = "DELETE FROM kargolar WHERE kargoLat=" + kLat + " and kargoLng=" + kLng;
            Statement ifade = conn.createStatement();
            ifade.execute(query);
            conn.close();
            teslimEdilenlerGuncelle();

        } catch (SQLException | ClassNotFoundException e) {
            System.out.println("Veritabanına Bağlanamadı." + e);

        }
    }//GEN-LAST:event_teslimEdilmisKargoyuSilActionPerformed

    private void siradakiKargoButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siradakiKargoButonActionPerformed

        try {
            siraIndexleri = gmRequest.getPathIndexleri();
            int siraIndexi = siraIndexleri.get(1);
            if (siraIndexleri.size() == 2) {
                dagitimCheckBox.setSelected(false);
                JOptionPane.showMessageDialog(null, "Teslim edilecek kargo kalmadı.");
                markerKey = 1;
                kargolariYukle();
                yolCizimVeHesaplama();
            } else {
                Class.forName("com.mysql.cj.jdbc.Driver");
                String url = String.format("jdbc:mysql://35.202.83.160:3306/proje");
                Connection conn = DriverManager.getConnection(url, "root", "emre1441.");
                System.out.println("Veritabanına bağlandı.");
                String query = "UPDATE kargolar SET teslimEdildiMi='true' WHERE kargoLat=" + kargolar.get(siraIndexi - 1).kargoLat + " AND kargoLng=" + kargolar.get(siraIndexi - 1).kargoLng + "";
                Statement ifade = conn.createStatement();
                ifade.executeUpdate(query);
                conn.close();
                String yazi = siraIndexi + " Numaralı Kargo Teslim Edildi.";
                JOptionPane.showMessageDialog(null, yazi);
                System.out.println("BEKLİYORZ");
                siraIndexleri.remove(1);
                kuryeeKonum = kargolar.get(siraIndexi - 1);
                System.out.println("Teslim Edildi: Kargo  " + siraIndexi + " " + kargolar.get(siraIndexi - 1).kargoLat);
                teslimEdilenlerGuncelle();
                teslimEdilmeyenlerGuncelle();
                yolCizimVeHesaplama();
            }

        } catch (SQLException | ClassNotFoundException e) {
            System.out.println("Veritabanına baglanamadı. " + e);
        }
    }//GEN-LAST:event_siradakiKargoButonActionPerformed

    private void manuelKuryeEkleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manuelKuryeEkleActionPerformed
        if (kuryeKonumBastaSecildiMi == 0) {
            kuryeKonumBastaSecildiMi = 1;
            kuryeKonumuBelirlendi = true;
            Double x = Double.parseDouble(latTextBox.getText());
            Double y = Double.parseDouble(lngTextBox.getText());
            String z = Integer.toString(markerKey);
            gmv.setKuryeMarker(x, y, z, null);
            Kargo kurye = new Kargo(x, y);
            gmRequest.setKuryeKonum(kurye);
            kuryeeKonum = kurye;
            dash2.gmv.setKuryeMarker(x, y, z, null);
            kargolariYukle();
            yolCizimVeHesaplama();
        } else {
            markerKey = 0;
            Double x = Double.parseDouble(latTextBox.getText());
            Double y = Double.parseDouble(lngTextBox.getText());
            gmv.initMap();
            dash2.gmv.initMap();
            gmv.setKuryeMarker(x, y, "0", null);
            Kargo kurye = new Kargo(x, y);
            gmRequest.setKuryeKonum(kurye);
            kuryeeKonum = kurye;
            dash2.gmv.setKuryeMarker(x, y, "0", null);
            kargolariYukle();
            yolCizimVeHesaplama();
        }
    }//GEN-LAST:event_manuelKuryeEkleActionPerformed

    public void veriTabaninaKargoEkle(double lat, double lng) {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = String.format("jdbc:mysql://35.202.83.160:3306/proje");
            Connection conn = DriverManager.getConnection(url, "root", "emre1441.");
            System.out.println("Veritabanına Bağlandı.");
            String query = "INSERT INTO kargolar(kargoLat, kargoLng,teslimEdildiMi) "
                    + "VALUES(" + lat + "," + lng + ",'false')";

            Statement ifade = conn.createStatement();
            ifade.execute(query);
            conn.close();

        } catch (SQLException | ClassNotFoundException e) {
            System.out.println("Veritabanına Bağlanamadı." + e);

        }
    }

    public void teslimEdilenlerGuncelle() {
        DefaultTableModel model = new DefaultTableModel(new String[]{"Kargo Lat", "Kargo Lng", "Teslim Edildi Mi"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = String.format("jdbc:mysql://35.202.83.160:3306/proje");
            Connection conn = DriverManager.getConnection(url, "root", "emre1441.");
            System.out.println("Veritabanına Bağlandı.");
            String query = "SELECT * FROM kargolar WHERE teslimEdildiMi='true'";

            Statement ifade = conn.createStatement();
            ResultSet rs = ifade.executeQuery(query);
            while (rs.next()) {
                String a = rs.getString("kargoLat");
                String b = rs.getString("kargoLng");
                String c = rs.getString("teslimEdildiMi");
                model.addRow(new Object[]{a, b, c});
            }
            teslimEdilenlerTablo.setModel(model);
            conn.close();
        } catch (SQLException | ClassNotFoundException e) {
            System.out.println("Veritabanına Bağlanamadı." + e);

        }
    }

    public void teslimEdilmeyenlerGuncelle() {
        DefaultTableModel model = new DefaultTableModel(new String[]{"Kargo Lat", "Kargo Lng", "Teslim Edildi Mi"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = String.format("jdbc:mysql://35.202.83.160:3306/proje");
            Connection conn = DriverManager.getConnection(url, "root", "emre1441.");
            System.out.println("Veritabanına Bağlandı.");
            String query = "SELECT * FROM kargolar WHERE teslimEdildiMi='false'";

            Statement ifade = conn.createStatement();
            ResultSet rs = ifade.executeQuery(query);
            while (rs.next()) {
                String a = rs.getString("kargoLat");
                String b = rs.getString("kargoLng");
                String c = rs.getString("teslimEdildiMi");
                model.addRow(new Object[]{a, b, c});

            }
            teslimEdilmeyenlerTablo.setModel(model);
            conn.close();
        } catch (SQLException | ClassNotFoundException e) {
            System.out.println("Veritabanına Bağlanamadı." + e);

        }

    }

    public void kargolariYukle() {
        try {
            markerKey = 1;
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = String.format("jdbc:mysql://35.202.83.160:3306/proje");
            Connection conn = DriverManager.getConnection(url, "root", "emre1441.");
            System.out.println("Veritabanına Bağlandı.");
            String query = "SELECT * FROM kargolar WHERE teslimEdildiMi='false'";
            kargolar.clear();
            Statement ifade = conn.createStatement();
            ResultSet rs = ifade.executeQuery(query);
            while (rs.next()) {
                String a = rs.getString("kargoLat");
                String b = rs.getString("kargoLng");
                String c = rs.getString("teslimEdildiMi");
                Kargo yeniKargo = new Kargo(Double.parseDouble(a), Double.parseDouble(b));
                yeniKargo.setSahteKargoId(markerKey);
                kargolar.add(yeniKargo);
            }
            gmv.initMap();
            this.dash2.gmv.initMap();
            for (int i = 0; i < kargolar.size(); i++) {
                Kargo karg = kargolar.get(i);
                Double x = karg.getKargoLat();
                Double y = karg.getKargoLng();
                String z = Integer.toString(markerKey);
                String z2 = Integer.toString(karg.getSahteKargoId());
                gmv.addMarker(x, y, z, null);
                this.dash2.gmv.addMarker(x, y, z2, null);
                markerKey += 1;
            }
            conn.close();
        } catch (SQLException | ClassNotFoundException e) {
            System.out.println("Veritabanına Bağlanamadı." + e);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Dashboard1().setVisible(true);
                } catch (ParserConfigurationException ex) {
                    Logger.getLogger(Dashboard1.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SAXException ex) {
                    Logger.getLogger(Dashboard1.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Dashboard1.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox dagitimCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JButton kargoEkleButon;
    private javax.swing.JMenuItem kargoyuSil;
    private javax.swing.JButton kuryeKonumButon;
    private javax.swing.JTextField latTextBox;
    private javax.swing.JTextField lngTextBox;
    private javax.swing.JButton manuelKargoEkle;
    private javax.swing.JButton manuelKuryeEkle;
    private javax.swing.JPanel mapsPanel;
    private javax.swing.JButton siradakiKargoButon;
    private javax.swing.JLabel teslimEdilen;
    private javax.swing.JTable teslimEdilenlerTablo;
    private javax.swing.JTable teslimEdilmeyenlerTablo;
    private javax.swing.JMenuItem teslimEdilmisKargoyuSil;
    private javax.swing.JButton tumKargoSilButon;
    private javax.swing.JButton yolButon;
    // End of variables declaration//GEN-END:variables
}
